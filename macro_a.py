# -*- coding: utf-8 -*-
"""macro-b.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iKq7oljH1mR8ozfMzEOQMCWac_2GRhYc
"""
import matplotlib
# matplotlib.use('TkAgg')
import pandas as pd
from sympy import symbols, Matrix
from filterpy.kalman import ExtendedKalmanFilter as EKF
from IPython.display import display
import sympy
import numpy as np
from numpy import dot, array
from filterpy.common import Q_discrete_white_noise
from matplotlib import pyplot as plt


sympy.init_printing(use_latex="mathjax", fontsize='16pt')
# sympy.init_printing(use_latex="latex", fontsize='16pt')


class MacroEKF(EKF):
    def __init__(self):
        super().__init__(11, 5)
        k, a, v_a, alpha, v_alpha, s, v_s, delta, v_delta, n, v_n = \
            symbols('k, A, v_A, alpha, v_alpha, s, v_s, delta, v_delta,  n, v_n')
        self.x_sym = [k, a, v_a, alpha, v_alpha, s, v_s, delta, v_delta, n, v_n]
        y = a * (k ** (1 - alpha))
        # self.Q = Q_discrete_white_noise(11, dt=1, var=0.0001) # adding noise
        # self.R = Q_discrete_white_noise(5, dt=1, var=0.1) #measurment noise
        # self.hx = Matrix([k, s, delta, n, y])
        self.hx = Matrix([[k], [s], [delta], [n], [y]])
        self.h_jacob_format = self.hx.jacobian(self.x_sym)
        self.fx = Matrix([[s * a * (k ** (1 - alpha)) - (delta + n) * k],
                          [v_a], [0], [v_alpha], [0], [v_s], [0], [v_delta], [0],
                          [v_n], [0]])
        self.gx = self.fx + Matrix(self.x_sym)
        print(self.gx)
        self.fx_jacob_format = self.fx.jacobian(self.x_sym)
        self.gx_jacob_format = self.gx.jacobian(self.x_sym)
        print("fx jacob: ")
        display(self.fx_jacob_format)
        print("gx jacob: ")
        display(self.gx_jacob_format)

    def compute_F(self):
        subs = {}
        for i, state in enumerate(self.x_sym):
            subs[state] = self.x[i, 0]
        # print("subs : ", subs)
        # F = array(self.fx_jacob_format.evalf(subs=subs))
        F = array(self.gx_jacob_format.evalf(subs=subs))
        # print("f : ")
        # display(F)
        try:
            print('------------------------------- convert to complex in compute f')
            self.F = F.astype(float)
            # self.F = F.astype(complex)
        except:
            print("F is : ", F)
            display(F)
            exit()

    def compute_current_f(self):
        subs = {}
        for i, state in enumerate(self.x_sym):
            subs[state] = self.x[i, 0]

        # return array(self.fx.evalf(subs=subs)).astype(complex)
        return array(self.fx.evalf(subs=subs)).astype(float)

    def predict_x(self, u=0):
        f = self.compute_current_f()
        # # print("current f : ", f)
        self.x = self.x + f
        # super().predict_x()
        # print("x : ", self.x)
        # print("F : ", self.F)
        # print("B : ", self.B)
        # print("u : ", u)
        # self.x = dot(self.F, self.x)

    # def predict(self, u=0):
    #   self.predict_x()
    #   self.P = np.dot(F, self.P).dot(F.T) + self.Q
    #   self.x_prior = np.copy(self.x)
    #   self.P_prior = np.copy(self.P)


def compute_current_jacob(x, jacob_format, x_format):
    """compute Jacobian matrix for h from its base format and x format and current x state"""
    subs = {}

    for i, state in enumerate(x_format):
        subs[state] = x[i, 0]

    jacob_format = jacob_format.evalf(subs=subs)
    result = np.array(jacob_format)
    try:
        print('--------------------------- converting to float current jacob')
        result = result.astype(float)
    except:
        print('--------------------------- converting to complex current jacob')
        result = result.astype(complex)
    return result


def compute_current_h(x, matrix, x_format):
    """compute h array from its base format and x format and current x state"""
    subs = {}

    for i, state in enumerate(x_format):
        subs[state] = x[i, 0]

    result = matrix.evalf(subs=subs)
    # print("hx result : ", result)
    return result

def read_data(path):
    df = pd.read_csv(path)
    return df

# ekf = MacroEKF()
# display(ekf.h_jacob_format)
# print(" = ")
# n = compute_current_jacob(array([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11]]), ekf.h_jacob_format,
#                           ekf.x_sym)
# display(n)

# display(ekf.hx)
# print(" = ")
# h = compute_current_h([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], ekf.hx, ekf.x_sym)
# display(h)

# display(ekf.fx)




data_path = "data_final.csv"

df = read_data(data_path)

# df.head()


def avg(lst):
    return sum(lst) / len(lst)


def train_filter(df):
    df.fillna(0, inplace=True)
    first_row = df.iloc[0]
    x = np.array([[1], [1], [0], [0.5], [0.01], [first_row['s']], [0.01], [0.8], [0.01], [0], [0.001]])
    ekf = MacroEKF()
    ekf.x = x
    time = []
    actual_k = []
    predicted_k = []
    actual_s = []
    predicted_s = []
    actual_d = []
    predicted_d = []
    actual_n = []
    predicted_n = []
    actual_a = []
    predicted_a = []
    for index, row in df.iterrows():
        if index == 0:
            continue
        z = [row['k'], row['s'], row['Delta'], row['n'], row['Num Y_L']]
        # z = [row['k'], row['s'], row['Delta'], row['Real Y_L']]
        # actual_k.append(z[0])
        actual_k.append(row['k'])
        actual_d.append(row['Delta'])
        actual_s.append(row['s'])
        actual_n.append(row['n'])
        actual_a.append(row['A'])
        ekf.compute_F()
        ekf.predict()
        current_t = row['Unnamed: 0']
        if current_t < 1390:
            ekf.update(array(z).reshape(5, 1), compute_current_jacob, compute_current_h,
                       args=(ekf.h_jacob_format, ekf.x_sym), hx_args=(ekf.hx, ekf.x_sym))

        predicted_k.append(ekf.x[0, 0])
        predicted_a.append(ekf.x[1, 0])
        predicted_s.append(ekf.x[5, 0])
        predicted_d.append(ekf.x[7, 0])
        predicted_n.append(ekf.x[9, 0])

        time.append(current_t)

    n_df = pd.DataFrame({"time": time, "actual": actual_n,
                         "predicted": predicted_n})
    n_df.to_csv("outputs/csv/n.csv")

    s_df = pd.DataFrame({"time": time, "actual": actual_s,
                         "predicted": predicted_s})
    s_df.to_csv("outputs/csv/s.csv")

    d_df = pd.DataFrame({"time": time, "actual": actual_d,
                         "predicted": predicted_d})
    d_df.to_csv("outputs/csv/d.csv")

    k_df = pd.DataFrame({"time": time, "actual": actual_k,
                         "predicted": predicted_k})
    k_df.to_csv("outputs/csv/k.csv")

    print("actual n : ", avg(actual_n))
    print("predicted n : ", avg(predicted_n))
    plt.subplot(4, 1, 1)
    # plt.plot(time, actual_k, 'b', label="actual k")
    # plt.plot(time, predicted_k, 'g', label="predicted k ")
    # plt.legend(frameon=False)
    plt.subplot(4, 1, 2)
    plt.plot(time, actual_d, 'b', label="actual delta")
    plt.plot(time, predicted_d, 'g', label="predicted delta ")
    plt.legend(frameon=False)
    plt.subplot(4, 1, 3)
    plt.plot(time, actual_n, 'b', label="actual n")
    plt.plot(time, predicted_n, 'g', label="predicted n ")
    plt.legend(frameon=False)
    plt.subplot(4, 1, 4)
    plt.plot(time, actual_s, 'b', label="actual s")
    plt.plot(time, predicted_s, 'g', label="predicted s ")
    plt.legend(frameon=False)
    plt.savefig('outputs/res1.jpg')
    plt.show()


train_filter(df)
